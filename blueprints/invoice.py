# Enhanced invoice.py with proper email functionality
import os
import json
from datetime import datetime, timedelta
from flask import Blueprint, render_template, request, redirect, flash, url_for, jsonify
from flask_login import login_required, current_user
from flask_mail import Message
from user_utils import load_json_feature, save_json_feature

invoice_bp = Blueprint("invoice", __name__)

INVOICES_DIR = "data/invoices"
TEMPLATES_DIR = "data/invoice_templates"
CLIENTS_DIR = "data/clients"

# Ensure directories exist
os.makedirs(INVOICES_DIR, exist_ok=True)
os.makedirs(TEMPLATES_DIR, exist_ok=True)
os.makedirs(CLIENTS_DIR, exist_ok=True)

def generate_invoice_number():
    """Generate a simple invoice number based on date and random digits."""
    date_part = datetime.now().strftime("%y%m%d")
    count = len(load_json_feature(INVOICES_DIR, current_user.username)) + 1
    return f"INV-{date_part}-{count:03d}"

def normalize_invoice_data(invoice):
    """Ensure invoice has consistent field names for templates."""
    if "total_amount" not in invoice and "amount" in invoice:
        invoice["total_amount"] = invoice["amount"]
    elif "amount" not in invoice and "total_amount" in invoice:
        invoice["amount"] = invoice["total_amount"]
    elif "total_amount" not in invoice and "amount" not in invoice:
        invoice["total_amount"] = invoice["amount"] = 0
    
    invoice.setdefault("status", "unpaid")
    invoice.setdefault("client_name", "Unknown Client")
    invoice.setdefault("client_email", "")
    invoice.setdefault("description", "")
    invoice.setdefault("notes", "")
    invoice.setdefault("issue_date", datetime.now().strftime("%Y-%m-%d"))
    invoice.setdefault("due_date", datetime.now().strftime("%Y-%m-%d"))
    invoice.setdefault("email_sent", False)
    invoice.setdefault("email_sent_date", "")
    
    return invoice

def send_invoice_email(invoice, coach_name):
    """Send invoice via email to client"""
    try:
        from app import mail
        
        if not invoice.get("client_email"):
            return False, "No client email provided"
        
        subject = f"🎾 Invoice #{invoice['invoice_number']} from {coach_name}"
        
        # Fix the f-string issue by moving the replace operation outside
        payment_method = invoice.get('payment_method', '')
        payment_method_display = payment_method.replace('_', ' ').title() if payment_method else ""
        
        # Create email body
        body = f"""Hi {invoice['client_name']},

I hope this email finds you well. Please find your tennis coaching invoice below:

🎾 INVOICE DETAILS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Invoice Number: {invoice['invoice_number']}
Service: {invoice['description']}
Amount: £{invoice['amount']:.2f}
Issue Date: {invoice['issue_date']}
Due Date: {invoice['due_date']}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

{f"Payment Method: {payment_method_display}" if payment_method_display else ""}

{f"Additional Notes:\n{invoice['notes']}\n" if invoice.get('notes') else ""}

If you have any questions about this invoice or need to discuss payment arrangements, please don't hesitate to contact me.

Thank you for choosing my tennis coaching services!

Best regards,
{coach_name}
Tennis Coach

---
This invoice was generated by Coaches Hub
View online: [Invoice details available in your coaching portal]
"""

        msg = Message(
            subject=subject,
            recipients=[invoice["client_email"]],
            body=body
        )
        
        mail.send(msg)
        return True, "Email sent successfully"
        
    except Exception as e:
        print(f"Error sending invoice email: {e}")
        return False, f"Failed to send email: {str(e)}"

def save_or_update_client(client_name, client_email=""):
    """Save or update client information."""
    if not client_name.strip():
        return
    
    try:
        clients = load_json_feature(CLIENTS_DIR, current_user.username)
        
        # Find existing client or create new one
        client = next((c for c in clients if c.get("name", "").lower() == client_name.lower()), None)
        
        if client:
            # Update existing client email if provided and different
            if client_email and client_email != client.get("email", ""):
                client["email"] = client_email
                client["updated_at"] = datetime.now().isoformat()
        else:
            # Create new client
            new_client = {
                "name": client_name,
                "email": client_email,
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            }
            clients.append(new_client)
        
        save_json_feature(CLIENTS_DIR, current_user.username, clients)
    except Exception as e:
        print(f"Error saving client: {e}")

def get_client_email(client_name):
    """Get email for a client if it exists."""
    try:
        clients = load_json_feature(CLIENTS_DIR, current_user.username)
        client = next((c for c in clients if c.get("name", "").lower() == client_name.lower()), None)
        return client.get("email", "") if client else ""
    except:
        return ""

# === INVOICE ROUTES ===

@invoice_bp.route("/invoices")
@login_required
def invoice_list():
    """Display the invoice dashboard with clear paid/unpaid sections."""
    try:
        invoices = load_json_feature(INVOICES_DIR, current_user.username)
        invoices = [normalize_invoice_data(inv) for inv in invoices]
        invoices.sort(key=lambda x: x.get("created_at", ""), reverse=True)
        
        paid_invoices = [inv for inv in invoices if inv.get("status") == "paid"]
        unpaid_invoices = [inv for inv in invoices if inv.get("status") in ["unpaid", "overdue"]]
        
        # Check for overdue invoices and update status
        today = datetime.now().date()
        updated = False
        for invoice in unpaid_invoices:
            try:
                due_date = datetime.strptime(invoice.get("due_date", ""), "%Y-%m-%d").date()
                if due_date < today and invoice.get("status") != "overdue":
                    invoice["status"] = "overdue"
                    updated = True
            except ValueError:
                continue
        
        if updated:
            save_json_feature(INVOICES_DIR, current_user.username, invoices)
        
        total_paid = sum(float(inv.get("total_amount", 0)) for inv in paid_invoices)
        total_unpaid = sum(float(inv.get("total_amount", 0)) for inv in unpaid_invoices)
        num_overdue = sum(1 for inv in unpaid_invoices if inv.get("status") == "overdue")
        
        return render_template(
            "invoice_list.html",
            paid_invoices=paid_invoices,
            unpaid_invoices=unpaid_invoices,
            total_paid=total_paid,
            total_unpaid=total_unpaid,
            num_overdue=num_overdue
        )
    except Exception as e:
        flash(f"❌ Error loading invoices: {str(e)}", "danger")
        return render_template(
            "invoice_list.html",
            paid_invoices=[],
            unpaid_invoices=[],
            total_paid=0,
            total_unpaid=0,
            num_overdue=0
        )

@invoice_bp.route("/invoices/create", methods=["GET", "POST"])
@login_required
def create_invoice():
    """Create a new invoice with template and email support."""
    if request.method == "POST":
        client_name = request.form.get("client_name", "").strip()
        client_email = request.form.get("client_email", "").strip()
        description = request.form.get("description", "").strip()
        amount = request.form.get("amount", "0").strip()
        due_date = request.form.get("due_date", "")
        notes = request.form.get("notes", "").strip()
        payment_method = request.form.get("payment_method", "").strip()
        status = request.form.get("status", "unpaid")
        send_email = "send_email" in request.form
        
        if not client_name or not description or not amount:
            flash("❌ Please fill in all required fields.", "danger")
            return redirect(url_for("invoice.create_invoice"))
        
        # Validate email format if provided
        if client_email and "@" not in client_email:
            flash("❌ Please enter a valid email address.", "danger")
            return redirect(url_for("invoice.create_invoice"))
        
        try:
            amount = float(amount)
            if amount <= 0:
                flash("❌ Amount must be greater than 0.", "danger")
                return redirect(url_for("invoice.create_invoice"))
        except ValueError:
            flash("❌ Amount must be a valid number.", "danger")
            return redirect(url_for("invoice.create_invoice"))
        
        try:
            datetime.strptime(due_date, "%Y-%m-%d")
        except ValueError:
            flash("❌ Please provide a valid due date.", "danger")
            return redirect(url_for("invoice.create_invoice"))
        
        # Save or update client information
        save_or_update_client(client_name, client_email)
        
        new_invoice = {
            "id": str(datetime.now().timestamp()).replace(".", ""),
            "invoice_number": generate_invoice_number(),
            "client_name": client_name,
            "client_email": client_email,
            "description": description,
            "amount": amount,
            "total_amount": amount,
            "issue_date": datetime.now().strftime("%Y-%m-%d"),
            "due_date": due_date,
            "notes": notes,
            "payment_method": payment_method,
            "status": status,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "coach_name": current_user.username,
            "email_sent": False,
            "email_sent_date": ""
        }
        
        try:
            invoices = load_json_feature(INVOICES_DIR, current_user.username)
            invoices.append(new_invoice)
            save_json_feature(INVOICES_DIR, current_user.username, invoices)
            
            # Send email if requested and email is provided
            if send_email and client_email:
                success, message = send_invoice_email(new_invoice, current_user.username.title())
                if success:
                    # Update invoice to mark email as sent
                    new_invoice["email_sent"] = True
                    new_invoice["email_sent_date"] = datetime.now().strftime("%Y-%m-%d %H:%M")
                    save_json_feature(INVOICES_DIR, current_user.username, invoices)
                    flash("✅ Invoice created and email sent successfully!", "success")
                else:
                    flash(f"✅ Invoice created successfully! ⚠️ Email failed: {message}", "warning")
            else:
                flash("✅ Invoice created successfully!", "success")
            
            return redirect(url_for("invoice.view_invoice", invoice_id=new_invoice["id"]))
            
        except Exception as e:
            flash(f"❌ Error saving invoice: {str(e)}", "danger")
            return redirect(url_for("invoice.create_invoice"))
    
    # Handle GET request (display form)
    duplicate_from = None
    is_duplicate = False
    prefill_client = request.args.get("client")
    
    if request.args.get("duplicate"):
        try:
            invoices = load_json_feature(INVOICES_DIR, current_user.username)
            duplicate_from = next((inv for inv in invoices if inv.get("id") == request.args.get("duplicate")), None)
            is_duplicate = True
        except:
            duplicate_from = None
    
    # If prefilling client, get their email
    prefill_email = ""
    if prefill_client:
        prefill_email = get_client_email(prefill_client)
    elif duplicate_from:
        prefill_email = duplicate_from.get("client_email", "")
    
    # Load templates for quick selection
    templates = load_json_feature(TEMPLATES_DIR, current_user.username)
    
    default_due_date = (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")
    
    return render_template(
        "invoice_create.html", 
        due_date=default_due_date,
        duplicate_from=duplicate_from,
        is_duplicate=is_duplicate,
        templates=templates,
        prefill_client=prefill_client,
        prefill_email=prefill_email
    )

@invoice_bp.route("/invoices/view/<invoice_id>")
@login_required
def view_invoice(invoice_id):
    """View a specific invoice."""
    try:
        invoices = load_json_feature(INVOICES_DIR, current_user.username)
        invoice = next((inv for inv in invoices if inv.get("id") == invoice_id), None)
        
        if not invoice:
            flash("❌ Invoice not found.", "danger")
            return redirect(url_for("invoice.invoice_list"))
        
        invoice = normalize_invoice_data(invoice)
        return render_template("invoice_view.html", invoice=invoice)
    except Exception as e:
        flash(f"❌ Error loading invoice: {str(e)}", "danger")
        return redirect(url_for("invoice.invoice_list"))

@invoice_bp.route("/invoices/send-email/<invoice_id>", methods=["POST"])
@login_required
def send_invoice_email_route(invoice_id):
    """Send an invoice via email"""
    try:
        invoices = load_json_feature(INVOICES_DIR, current_user.username)
        invoice = next((inv for inv in invoices if inv.get("id") == invoice_id), None)
        
        if not invoice:
            return jsonify({"success": False, "error": "Invoice not found"}), 404
        
        if not invoice.get("client_email"):
            return jsonify({"success": False, "error": "No client email address"}), 400
        
        success, message = send_invoice_email(invoice, current_user.username.title())
        
        if success:
            # Update invoice to mark email as sent
            invoice["email_sent"] = True
            invoice["email_sent_date"] = datetime.now().strftime("%Y-%m-%d %H:%M")
            save_json_feature(INVOICES_DIR, current_user.username, invoices)
            return jsonify({"success": True, "message": "Email sent successfully"})
        else:
            return jsonify({"success": False, "error": message}), 500
            
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500

@invoice_bp.route("/invoices/mark-paid/<invoice_id>", methods=["POST"])
@login_required
def mark_paid(invoice_id):
    """Simple one-click action to mark invoice as paid."""
    try:
        invoices = load_json_feature(INVOICES_DIR, current_user.username)
        invoice = next((inv for inv in invoices if inv.get("id") == invoice_id), None)
        
        if not invoice:
            flash("❌ Invoice not found.", "danger")
        else:
            invoice["status"] = "paid"
            invoice["updated_at"] = datetime.now().isoformat()
            invoice["paid_date"] = datetime.now().strftime("%Y-%m-%d")
            save_json_feature(INVOICES_DIR, current_user.username, invoices)
            flash("✅ Invoice marked as paid!", "success")
    except Exception as e:
        flash(f"❌ Error updating invoice: {str(e)}", "danger")
    
    return redirect(url_for("invoice.invoice_list"))

@invoice_bp.route("/invoices/delete/<invoice_id>", methods=["POST"])
@login_required
def delete_invoice(invoice_id):
    """Delete an invoice."""
    try:
        invoices = load_json_feature(INVOICES_DIR, current_user.username)
        original_count = len(invoices)
        invoices = [inv for inv in invoices if inv.get("id") != invoice_id]
        
        if len(invoices) == original_count:
            flash("❌ Invoice not found.", "danger")
        else:
            save_json_feature(INVOICES_DIR, current_user.username, invoices)
            flash("✅ Invoice deleted successfully!", "success")
    except Exception as e:
        flash(f"❌ Error deleting invoice: {str(e)}", "danger")
    
    return redirect(url_for("invoice.invoice_list"))

@invoice_bp.route("/invoices/duplicate/<invoice_id>")
@login_required
def duplicate_invoice(invoice_id):
    """Create a new invoice based on an existing one."""
    try:
        invoices = load_json_feature(INVOICES_DIR, current_user.username)
        original_invoice = next((inv for inv in invoices if inv.get("id") == invoice_id), None)
        
        if not original_invoice:
            flash("❌ Original invoice not found.", "danger")
            return redirect(url_for("invoice.invoice_list"))
        
        return redirect(url_for("invoice.create_invoice", duplicate=invoice_id))
        
    except Exception as e:
        flash(f"❌ Error duplicating invoice: {str(e)}", "danger")
        return redirect(url_for("invoice.invoice_list"))

# === TEMPLATE MANAGEMENT ===

@invoice_bp.route("/invoices/templates")
@login_required
def manage_templates():
    """Manage invoice templates."""
    try:
        templates = load_json_feature(TEMPLATES_DIR, current_user.username)
        return render_template("invoice_templates.html", templates=templates)
    except Exception as e:
        flash(f"❌ Error loading templates: {str(e)}", "danger")
        return render_template("invoice_templates.html", templates=[])

@invoice_bp.route("/invoices/templates/create", methods=["POST"])
@login_required
def create_template():
    """Create a new invoice template."""
    try:
        name = request.form.get("name", "").strip()
        description = request.form.get("description", "").strip()
        amount = request.form.get("amount", "0").strip()
        notes = request.form.get("notes", "").strip()
        
        if not name or not description or not amount:
            flash("❌ Please fill in all required fields.", "danger")
            return redirect(url_for("invoice.manage_templates"))
        
        try:
            amount = float(amount)
            if amount <= 0:
                flash("❌ Amount must be greater than 0.", "danger")
                return redirect(url_for("invoice.manage_templates"))
        except ValueError:
            flash("❌ Amount must be a valid number.", "danger")
            return redirect(url_for("invoice.manage_templates"))
        
        # Create new template
        new_template = {
            "id": str(datetime.now().timestamp()).replace(".", ""),
            "name": name,
            "description": description,
            "amount": amount,
            "notes": notes,
            "created_at": datetime.now().isoformat()
        }
        
        templates = load_json_feature(TEMPLATES_DIR, current_user.username)
        templates.append(new_template)
        save_json_feature(TEMPLATES_DIR, current_user.username, templates)
        
        flash("✅ Template created successfully!", "success")
    except Exception as e:
        flash(f"❌ Error creating template: {str(e)}", "danger")
    
    return redirect(url_for("invoice.manage_templates"))

@invoice_bp.route("/invoices/templates/delete/<template_id>", methods=["POST"])
@login_required
def delete_template(template_id):
    """Delete an invoice template."""
    try:
        templates = load_json_feature(TEMPLATES_DIR, current_user.username)
        original_count = len(templates)
        templates = [t for t in templates if t.get("id") != template_id]
        
        if len(templates) == original_count:
            flash("❌ Template not found.", "danger")
        else:
            save_json_feature(TEMPLATES_DIR, current_user.username, templates)
            flash("✅ Template deleted successfully!", "success")
    except Exception as e:
        flash(f"❌ Error deleting template: {str(e)}", "danger")
    
    return redirect(url_for("invoice.manage_templates"))

# === CLIENT MANAGEMENT ===

@invoice_bp.route("/invoices/clients")
@login_required
def clients_dashboard():
    """Display all clients with their outstanding balances and email addresses."""
    try:
        invoices = load_json_feature(INVOICES_DIR, current_user.username)
        invoices = [normalize_invoice_data(inv) for inv in invoices]
        
        # Group invoices by client
        clients = {}
        for invoice in invoices:
            client_name = invoice.get("client_name", "Unknown Client")
            client_email = invoice.get("client_email", "")
            
            if client_name not in clients:
                clients[client_name] = {
                    "name": client_name,
                    "email": client_email,
                    "total_invoices": 0,
                    "total_outstanding": 0,
                    "total_paid": 0,
                    "total_overdue": 0,
                    "unpaid_invoices": [],
                    "paid_invoices": [],
                    "last_invoice_date": None,
                    "last_payment_date": None
                }
            
            client = clients[client_name]
            client["total_invoices"] += 1
            
            # Update email if we have one and don't have one stored
            if client_email and not client["email"]:
                client["email"] = client_email
            
            invoice_amount = float(invoice.get("total_amount", 0))
            invoice_date = invoice.get("issue_date", "")
            
            if invoice.get("status") == "paid":
                client["total_paid"] += invoice_amount
                client["paid_invoices"].append(invoice)
                
                paid_date = invoice.get("paid_date", invoice_date)
                if not client["last_payment_date"] or paid_date > client["last_payment_date"]:
                    client["last_payment_date"] = paid_date
            else:
                client["total_outstanding"] += invoice_amount
                client["unpaid_invoices"].append(invoice)
                
                # Check if overdue
                if invoice.get("status") == "overdue":
                    client["total_overdue"] += invoice_amount
            
            # Track last invoice date
            if not client["last_invoice_date"] or invoice_date > client["last_invoice_date"]:
                client["last_invoice_date"] = invoice_date
        
        # Sort clients by outstanding amount (highest first)
        sorted_clients = sorted(clients.values(), 
                              key=lambda x: x["total_outstanding"], 
                              reverse=True)
        
        # Calculate summary stats
        total_clients = len(clients)
        clients_with_outstanding = sum(1 for c in clients.values() if c["total_outstanding"] > 0)
        total_outstanding_all = sum(c["total_outstanding"] for c in clients.values())
        
        return render_template(
            "invoice_clients.html",
            clients=sorted_clients,
            total_clients=total_clients,
            clients_with_outstanding=clients_with_outstanding,
            total_outstanding_all=total_outstanding_all
        )
        
    except Exception as e:
        flash(f"❌ Error loading clients: {str(e)}", "danger")
        return render_template("invoice_clients.html", clients=[])

@invoice_bp.route("/invoices/clients/<client_name>")
@login_required
def client_detail(client_name):
    """Display detailed view for a specific client."""
    try:
        invoices = load_json_feature(INVOICES_DIR, current_user.username)
        invoices = [normalize_invoice_data(inv) for inv in invoices]
        
        # Filter invoices for this client
        client_invoices = [inv for inv in invoices if inv.get("client_name") == client_name]
        
        if not client_invoices:
            flash(f"❌ No invoices found for client: {client_name}", "warning")
            return redirect(url_for("invoice.clients_dashboard"))
        
        # Sort by date (newest first)
        client_invoices.sort(key=lambda x: x.get("issue_date", ""), reverse=True)
        
        # Get client email from most recent invoice
        client_email = ""
        for invoice in client_invoices:
            if invoice.get("client_email"):
                client_email = invoice.get("client_email")
                break
        
        # Calculate client summary
        total_outstanding = sum(float(inv.get("total_amount", 0)) 
                              for inv in client_invoices 
                              if inv.get("status") != "paid")
        
        total_paid = sum(float(inv.get("total_amount", 0)) 
                        for inv in client_invoices 
                        if inv.get("status") == "paid")
        
        unpaid_count = sum(1 for inv in client_invoices if inv.get("status") != "paid")
        overdue_count = sum(1 for inv in client_invoices if inv.get("status") == "overdue")
        
        return render_template(
            "invoice_client_detail.html",
            client_name=client_name,
            client_email=client_email,
            invoices=client_invoices,
            total_outstanding=total_outstanding,
            total_paid=total_paid,
            unpaid_count=unpaid_count,
            overdue_count=overdue_count
        )
        
    except Exception as e:
        flash(f"❌ Error loading client details: {str(e)}", "danger")
        return redirect(url_for("invoice.clients_dashboard"))

@invoice_bp.route("/invoices/clients/<client_name>/create")
@login_required
def create_invoice_for_client(client_name):
    """Create a new invoice pre-filled with client name and email."""
    return redirect(url_for("invoice.create_invoice", client=client_name))

# API endpoint for client email lookup
@invoice_bp.route("/invoices/api/client-email/<client_name>")
@login_required
def get_client_email_api(client_name):
    """API endpoint to get client email for autocomplete."""
    try:
        email = get_client_email(client_name)
        return jsonify({"success": True, "email": email})
    except Exception as e:
        return jsonify({"success": False, "error": str(e)})